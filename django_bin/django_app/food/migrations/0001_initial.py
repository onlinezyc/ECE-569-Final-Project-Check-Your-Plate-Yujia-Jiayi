# Generated by Django 4.2.11 on 2024-05-05 05:36

from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='AcquisitionSamples',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False, verbose_name='ID')),
                ('fdc_id_of_sample_food', models.IntegerField(verbose_name='样品食品FDC ID')),
                ('fdc_id_of_acquisition_food', models.IntegerField(verbose_name='采集食品FDC ID')),
            ],
            options={
                'verbose_name': '采集样品',
                'verbose_name_plural': '采集样品',
                'db_table': 'acquisition_samples',
            },
        ),
        migrations.CreateModel(
            name='AgriculturalSamples',
            fields=[
                ('fdc_id', models.IntegerField(primary_key=True, serialize=False, verbose_name='FDC ID')),
                ('acquisition_date', models.DateField(verbose_name='采集日期')),
                ('market_class', models.TextField(verbose_name='市场类别')),
                ('treatment', models.TextField(verbose_name='处理方式')),
                ('state', models.TextField(verbose_name='州份')),
            ],
            options={
                'verbose_name': '农业样品',
                'verbose_name_plural': '农业样品',
                'db_table': 'agricultural_samples',
            },
        ),
        migrations.CreateModel(
            name='FoodAttribute',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False, verbose_name='ID')),
                ('fdc_id', models.IntegerField(verbose_name='FDC ID')),
                ('seq_num', models.IntegerField(verbose_name='序列号')),
                ('food_attribute_type_id', models.IntegerField(verbose_name='食品属性类型ID')),
                ('name', models.TextField(verbose_name='属性名称')),
                ('value', models.TextField(verbose_name='属性值')),
            ],
            options={
                'verbose_name': '食品属性',
                'verbose_name_plural': '食品属性',
                'db_table': 'food_attribute',
            },
        ),
        migrations.CreateModel(
            name='FoodAttributeType',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField(verbose_name='属性类型名称')),
                ('description', models.TextField(verbose_name='属性类型描述')),
            ],
            options={
                'verbose_name': '食品属性类型',
                'verbose_name_plural': '食品属性类型',
                'db_table': 'food_attribute_type',
            },
        ),
        migrations.CreateModel(
            name='FoodCalorieConversionFactor',
            fields=[
                ('food_nutrient_conversion_factor_id', models.IntegerField(primary_key=True, serialize=False, verbose_name='食品营养素转换因子ID')),
                ('protein_value', models.FloatField(verbose_name='蛋白质值')),
                ('fat_value', models.FloatField(verbose_name='脂肪值')),
                ('carbohydrate_value', models.FloatField(verbose_name='碳水化合物值')),
            ],
            options={
                'verbose_name': '食品热量转换因子',
                'verbose_name_plural': '食品热量转换因子',
                'db_table': 'food_calorie_conversion_factor',
            },
        ),
        migrations.CreateModel(
            name='FoodComponent',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False, verbose_name='ID')),
                ('fdc_id', models.IntegerField(blank=True, null=True, verbose_name='FDC ID')),
                ('name', models.TextField(verbose_name='组成成分名称')),
                ('pct_weight', models.FloatField(verbose_name='百分比重量')),
                ('is_refuse', models.BooleanField(verbose_name='是否为废物')),
                ('gram_weight', models.FloatField(verbose_name='克重')),
                ('data_points', models.IntegerField(verbose_name='数据点')),
                ('min_year_acquired', models.IntegerField(verbose_name='最小年份获取')),
            ],
            options={
                'verbose_name': '食品组成成分',
                'verbose_name_plural': '食品组成成分',
                'db_table': 'food_component',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='FoodNutrient',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False, verbose_name='ID')),
                ('fdc_id', models.IntegerField(verbose_name='食品id')),
                ('nutrient_id', models.IntegerField(verbose_name='营养素ID')),
                ('amount', models.FloatField(verbose_name='量')),
                ('data_points', models.IntegerField(verbose_name='数据点')),
                ('derivation_id', models.IntegerField(verbose_name='派生ID')),
                ('min', models.FloatField(verbose_name='最小值')),
                ('max', models.FloatField(verbose_name='最大值')),
                ('median', models.FloatField(verbose_name='中位数')),
                ('footnote', models.TextField(verbose_name='脚注')),
                ('min_year_acquired', models.IntegerField(verbose_name='最小年份获取')),
            ],
            options={
                'verbose_name': '食品营养素',
                'verbose_name_plural': '食品营养素',
                'db_table': 'food_nutrient',
                'ordering': ['fdc_id'],
            },
        ),
        migrations.CreateModel(
            name='FoodNutrientConversionFactor',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False, verbose_name='ID')),
                ('fdc_id', models.IntegerField(verbose_name='FDC ID')),
            ],
            options={
                'verbose_name': '食品营养素转换因子',
                'verbose_name_plural': '食品营养素转换因子',
                'db_table': 'food_nutrient_conversion_factor',
            },
        ),
        migrations.CreateModel(
            name='FoodPortion',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False, verbose_name='ID')),
                ('fdc_id', models.IntegerField(verbose_name='FDC ID')),
                ('seq_num', models.IntegerField(verbose_name='序列号')),
                ('amount', models.FloatField(verbose_name='量')),
                ('measure_unit_id', models.IntegerField(verbose_name='度量单位ID')),
                ('portion_description', models.TextField(null=True, verbose_name='分量描述')),
                ('modifier', models.TextField(verbose_name='修改器')),
                ('gram_weight', models.FloatField(verbose_name='克重')),
                ('data_points', models.IntegerField(verbose_name='数据点')),
                ('footnote', models.TextField(null=True, verbose_name='脚注')),
                ('min_year_acquired', models.IntegerField(verbose_name='最小年份获取')),
            ],
            options={
                'verbose_name': '食品分量',
                'verbose_name_plural': '食品分量',
                'db_table': 'food_portion',
            },
        ),
        migrations.CreateModel(
            name='FoodProteinConversionFactor',
            fields=[
                ('food_nutrient_conversion_factor_id', models.IntegerField(primary_key=True, serialize=False, verbose_name='食品营养素转换因子ID')),
                ('value', models.FloatField(verbose_name='值')),
            ],
            options={
                'verbose_name': '食品蛋白质转换因子',
                'verbose_name_plural': '食品蛋白质转换因子',
                'db_table': 'food_protein_conversion_factor',
            },
        ),
        migrations.CreateModel(
            name='FoodUpdateLogEntry',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.TextField(blank=True, null=True, verbose_name='描述')),
                ('last_updated', models.TextField(verbose_name='最后更新日期')),
            ],
            options={
                'verbose_name': '食品更新日志',
                'verbose_name_plural': '食品更新日志',
                'db_table': 'food_update_log_entry',
            },
        ),
        migrations.CreateModel(
            name='FoundationFood',
            fields=[
                ('fdc_id', models.IntegerField(primary_key=True, serialize=False, verbose_name='FDC ID')),
                ('ndb_number', models.IntegerField(verbose_name='NDB编号')),
                ('footnote', models.TextField(verbose_name='脚注')),
            ],
            options={
                'verbose_name': '基础食品',
                'verbose_name_plural': '基础食品',
                'db_table': 'foundation_food',
            },
        ),
        migrations.CreateModel(
            name='InputFood',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False, verbose_name='ID')),
                ('fdc_id', models.IntegerField(verbose_name='FDC ID')),
                ('fdc_of_input_food', models.IntegerField(verbose_name='输入食品FDC ID')),
                ('seq_num', models.IntegerField(verbose_name='序列号')),
                ('amount', models.IntegerField(verbose_name='量')),
                ('sr_code', models.TextField(verbose_name='SR码')),
                ('sr_description', models.TextField(verbose_name='SR描述')),
                ('unit', models.TextField(verbose_name='单位')),
                ('portion_code', models.TextField(verbose_name='分量码')),
                ('portion_description', models.TextField(verbose_name='分量描述')),
                ('gram_weight', models.FloatField(verbose_name='克重')),
                ('retention_code', models.TextField(verbose_name='保留码')),
                ('survey_flag', models.TextField(verbose_name='调查标志')),
            ],
            options={
                'verbose_name': '输入食品',
                'verbose_name_plural': '输入食品',
                'db_table': 'input_food',
            },
        ),
        migrations.CreateModel(
            name='LabMethod',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.TextField(verbose_name='描述')),
                ('technique', models.TextField(verbose_name='技术')),
            ],
            options={
                'verbose_name': '实验方法',
                'verbose_name_plural': '实验方法',
                'db_table': 'lab_method',
            },
        ),
        migrations.CreateModel(
            name='LabMethodCode',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False, verbose_name='ID')),
                ('lab_method_id', models.IntegerField(verbose_name='实验方法ID')),
                ('code', models.TextField(verbose_name='代码')),
            ],
            options={
                'verbose_name': '实验方法代码',
                'verbose_name_plural': '实验方法代码',
                'db_table': 'lab_method_code',
            },
        ),
        migrations.CreateModel(
            name='LabMethodNutrient',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False, verbose_name='ID')),
                ('lab_method_id', models.IntegerField(verbose_name='实验方法ID')),
                ('nutrient_id', models.IntegerField(verbose_name='营养素ID')),
            ],
            options={
                'verbose_name': '实验方法营养素',
                'verbose_name_plural': '实验方法营养素',
                'db_table': 'lab_method_nutrient',
            },
        ),
        migrations.CreateModel(
            name='MarketAcquisition',
            fields=[
                ('fdc_id', models.IntegerField(primary_key=True, serialize=False, verbose_name='FDC ID')),
                ('brand_description', models.TextField(verbose_name='品牌描述')),
                ('expiration_date', models.DateField(verbose_name='过期日期')),
                ('label_weight', models.TextField(verbose_name='标签重量')),
                ('location', models.TextField(verbose_name='位置')),
                ('acquisition_date', models.DateField(verbose_name='采集日期')),
                ('sales_type', models.TextField(verbose_name='销售类型')),
                ('sample_lot_nbr', models.TextField(verbose_name='样品批号')),
                ('sell_by_date', models.DateField(verbose_name='销售日期')),
                ('store_city', models.TextField(verbose_name='商店城市')),
                ('store_name', models.TextField(verbose_name='商店名称')),
                ('store_state', models.TextField(verbose_name='商店州份')),
                ('upc_code', models.TextField(verbose_name='UPC码')),
            ],
            options={
                'verbose_name': '市场采购',
                'verbose_name_plural': '市场采购',
                'db_table': 'market_acquisition',
            },
        ),
        migrations.CreateModel(
            name='MeasureUnit',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField(verbose_name='名称')),
            ],
            options={
                'verbose_name': '测量单位',
                'verbose_name_plural': '测量单位',
                'db_table': 'measure_unit',
            },
        ),
        migrations.CreateModel(
            name='Nutrient',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField(verbose_name='名称')),
                ('unit_name', models.TextField(verbose_name='单位名称')),
                ('nutrient_nbr', models.FloatField(verbose_name='营养素编号')),
                ('rank', models.IntegerField(verbose_name='排名')),
            ],
            options={
                'verbose_name': '营养素',
                'verbose_name_plural': '营养素',
                'db_table': 'nutrient',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='Recipe',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False, verbose_name='食谱id')),
                ('name', models.CharField(max_length=20, verbose_name='食谱名称')),
                ('description', models.TextField(verbose_name='食谱描述')),
                ('author', models.TextField(verbose_name='食谱作者')),
                ('create_time', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
            ],
            options={
                'verbose_name': '食谱',
                'verbose_name_plural': '食谱',
                'db_table': 'recipe',
            },
        ),
        migrations.CreateModel(
            name='RecipeFood',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False, verbose_name='食谱食品id')),
                ('recipe_id', models.IntegerField(verbose_name='食谱id')),
                ('food_id', models.IntegerField(verbose_name='食品id')),
                ('amount', models.FloatField(verbose_name='食品数量')),
                ('unit', models.CharField(max_length=20, verbose_name='食品单位')),
            ],
            options={
                'verbose_name': '食谱食品',
                'verbose_name_plural': '食谱食品',
                'db_table': 'recipe_food',
            },
        ),
        migrations.CreateModel(
            name='SampleFood',
            fields=[
                ('fdc_id', models.IntegerField(primary_key=True, serialize=False, verbose_name='FDC ID')),
            ],
            options={
                'verbose_name': '样品食品',
                'verbose_name_plural': '样品食品',
                'db_table': 'sample_food',
            },
        ),
        migrations.CreateModel(
            name='SubSampleFood',
            fields=[
                ('fdc_id', models.IntegerField(primary_key=True, serialize=False, verbose_name='FDC ID')),
                ('fdc_id_of_sample_food', models.IntegerField(verbose_name='样品食品FDC ID')),
            ],
            options={
                'verbose_name': '子样品食品',
                'verbose_name_plural': '子样品食品',
                'db_table': 'sub_sample_food',
            },
        ),
        migrations.CreateModel(
            name='SubSampleResult',
            fields=[
                ('food_nutrient_id', models.IntegerField(primary_key=True, serialize=False, verbose_name='食品营养素ID')),
                ('adjusted_amount', models.FloatField(verbose_name='调整后的数量')),
                ('lab_method_id', models.IntegerField(verbose_name='实验方法ID')),
                ('nutrient_name', models.TextField(verbose_name='营养素名称')),
            ],
            options={
                'verbose_name': '子样品结果',
                'verbose_name_plural': '子样品结果',
                'db_table': 'sub_sample_result',
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False, verbose_name='用户id')),
                ('username', models.CharField(max_length=20, verbose_name='用户名')),
                ('password', models.CharField(max_length=20, verbose_name='密码')),
                ('email', models.EmailField(max_length=254, verbose_name='邮箱')),
                ('phone', models.CharField(max_length=11, verbose_name='手机号')),
                ('img', models.ImageField(default='user/default.jpg', upload_to='user/', verbose_name='用户头像')),
                ('sex', models.CharField(default='男', max_length=10, verbose_name='性别')),
                ('age', models.IntegerField(default=18, verbose_name='年龄')),
                ('height', models.FloatField(default=170, verbose_name='身高')),
                ('weight', models.FloatField(default=60, verbose_name='体重')),
                ('blood_pressure', models.CharField(default='120/80', max_length=20, verbose_name='血压')),
                ('diabetes', models.BooleanField(default=False, verbose_name='糖尿病')),
                ('pregnancy', models.BooleanField(default=False, verbose_name='怀孕')),
            ],
            options={
                'verbose_name': '用户',
                'verbose_name_plural': '用户',
                'db_table': 'user',
            },
        ),
        migrations.CreateModel(
            name='Food',
            fields=[
                ('fdc_id', models.IntegerField(primary_key=True, serialize=False, verbose_name='食品id')),
                ('data_type', models.TextField(verbose_name='数据类型')),
                ('description', models.CharField(max_length=64, verbose_name='食品描述')),
                ('food_category_id', models.IntegerField(verbose_name='食品类别ID')),
                ('publication_date', models.TextField(verbose_name='发布日期')),
            ],
            options={
                'verbose_name': '食品',
                'verbose_name_plural': '食品',
                'db_table': 'food',
                'ordering': ['fdc_id'],
                'indexes': [models.Index(fields=['description'], name='food_descrip_2ad172_idx')],
            },
        ),
    ]
